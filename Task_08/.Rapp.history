TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !TRUE)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
boring_function <- function(x) {x}
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector)
sum(my_vector)/ length(my_vector)
submit()
sum(my_vector)#
length(my_vector)#
sum(my_vector) / length(my_vector)
submit()
my_mean <- function(my_vector) {#
	sum(my_vector) / length(my_vector)#
}
submit()
my_mean <- function(my_vector) {#
	sum(my_vector)/length(my_vector)#
}
submit()
sum(my_vector)/length(my_vector)
submit()
my_mean <- function(my_vector) {}
sum(my_vector)/length(my_vector)
submit
my_mean <- function(my_vector) {#
	sum(my_vector)/length(my_vector)#
}
submit()
my_mean <- function(my_vector) {#
	sum(my_vector) / length(my_vector)#
}
submit()
my_mean <- sum(my_vector) / length(my_vector)
submit()
bye()
setwd("~/Desktop/Evolution/Programming/Task.02 ")
Data <- read.csv ("http://jonsmitchell.com/data/beren.csv", stringsAsfactors=F)
my_mean(c(4, 5, 10)_)
swirl()
submit()
my_mean(c(4, 5, 10))
remainder(5)
submit()
remainder(5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder( 4, div = 2)
args(remainder)
submit()
remainder(5)
remainder (11, 5)
remainder (divisor = 11, num = 5)
remainder( 4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
paste?
?paste
paste("Programming", "is","fun!")
?paste
paste("Programming", "is","fun!")
submit()
mad_libs(place = "Greece", adjustive = "pretty", noun = "people")
submit()
mad_libs(place = "Greece", adjustive = "pretty", noun = "people")
submit()
"I" %p% "love" %p% "R!"
"Hello" %p% "student"
"Hello" %p% "student!"
"I" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
"I"%p%"love"%p%"R!"
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot( x= cars$speed, y= cars$dist)
plot( x= cars$dist, y= cars$speed)
plot( x= cars$speed, y = cars$dist, xlab = "Speed")
plot( x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot( x= cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, main="My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim= c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg~ cyl, data =mtcars)
hist(mtcars$mpg)
~/Desktop/Evolution/Programming/Tasks/Task.02/beren_new.csv
setwd("~/Desktop/Evolution/Programming/Task.02")#
Data <- read.csv("http://jonsmitchell.com/data/beren.csv" , stringsAsFactors=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:5, 1:3]#
Feeds <- which(Data[,9] == "bottle")#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
Feeds <- which(Data[, "event"] == "bottle")#
Feeds <- which(Data$event == "bottle")#
dayID <- apply(Data, 1, function(x)paste(x[1:3], collapse="-"))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event =="birth")]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age),]#
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
Feeds <- which (beren_new$event == "bottle")
Feeds <− which(beren3$event == ”bottle”)
Feeds <− which(beren_new$event == ”bottle”)
Feeds <- which(beren_new$even == "bottle")
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot( beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)" )
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck= -0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed),lty=2, col=`red`)
abline(h=mean(totalFeed),lty=2, col='red')
pdf(''r02b-totalMilkByDay.pdf'', height = 4, width = 4)
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days" ylab="ounces of milk")
plot(as.numeric(names( totalFeed)), totalFeed, type="b", pch=16, xlba="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
unique(beren3$event)
Naps <- which(beren3$event) == "naps"
Naps <- which(beren3$event == "nap")
beren4 <- Data[Naps]
beren4 <- Data[Naps,]
head(beren4)
Naps <- which(Data[,"event"] == "nap")
dayID <− apply(Data, 1, function(x) paste(x[1:3] , collapse=”−”)) dateID <− sapply(dayID, as.Date, format = ”%Y−%m−%d”, origin = ” 2019−04−18” )
dayID <− apply(Data, 1, function(x) paste(x[1:3] , collapse=”−”))
dayID <- apply(Data, 1, function(x) paste(x[1:3] , collapse=”−”))
dayID <- apply(Data, 1, function(x[1:3] , collapse="-"))
dayID <- apply(Data, 1, function(x) paste(x[1:3] , collapse="-"))
dataID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")
avgsleep <- mean (beren4$value[Naps])
avgNaps <- tapply(beren4$starttime[Naps], beren4$endtime[Naps], mean)
varFeed <− tapply(beren3$value[Naps], beren3$age[Naps], var)
varNaps<− tapply(beren3$value[Naps], beren3$age[Naps], var)
varNaps <− tapply(beren3$value[Naps], beren3$age[Naps], var)
Naps <- which(Data$event == "nap")
berenNaps <- Data[Naps,]
head(berenNaps)
dim(berenNaps)
berenNaps$event
beren4 <- beren3[Naps,]
head(beren4)
beren4$start_minute <- beren4$start_minute / 60
beren4$end_minute <- beren4$end_minute / 60
beren4$startnap <- beren4$start_hour + beren4$start_minute
beren4$endnap <- beren4$end_hour + beren4$end_minute
beren4$naplength <- beren4$endnap - beren4$startnap
totalNaptime <- beren4$endnap, beren4$age, sum, na.rm=T)
Naps <- which(Data$event == "nap")
berenNaps <- Data[Naps,]
head(berenNaps)
dim(berenNaps)
tail(berenNaps)
berenNaps$event
beren5 <- beren3[Naps,]
head(beren4)
beren5$start_minute <- beren5$start_minute / 60
beren5$end_minute <- beren5$end_minute / 60
beren5$endnap <- beren5$end_hour + beren5$end_minute
beren5$naplength <- beren5$endnap - beren5$startnap
totalNaptime<- tapply(beren5$day[Naps], beren5$age[Naps], sum)
install.packages("paleobioDB", dep = T)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspecies	OverTime <- pbdb_richness(fossils , rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
nspeciesOverTime <- pbdb_richness(fossils , rank = "genus", temporal_extent = c(MaxMA,MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
install.packages("iNaturalist", dep = T)
library(iNaturalst)
library(iNaturalist)
setwd(~/Desktop/Evolution/Programming/Tasks/Task.02)
install.packages("iNaturalist", dep = T)
install.packages("eBird", dep = T)
setwd("~/Desktop/Evolution/Programming/Task.02")
setwd("~/Desktop/Evolution/Programming/Task.03")
library(eBird)
install.packages("auk", dep = T)
setwd("~/Desktop/Evolution/Programming/Task.02")
library(auk)
source("http://jonmitchell.com/code/fxn05.R")
source("http://jonsmitchell.com/code/simFxn05.R")
setwd('~/Desktop/Evolution/ProgrammingTasks/Task_08')
setwd('~/Desktop/Evolution/Programming/Tasks/Task_08')
library(maps)
library(ape)
library(phytools)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"
vert.tree <- read.tree(text=text.string)
plot(vert.tree, edge.width=2)
nodelabels(frame="circle", bg='white', cex=1)
text.string <- "(((((((cow, pig), whale),(bat,(lemur, human))),(robin, iguana)), coelacanth), (gold_fish, trout)),shark);"#
vert.tree <- read.tree(text=text.string)#
plot(vert.tree, edge.width=2)#
#
nodelabels(frame="circle", bg='white', cex=1)
vert.tree
str(vert.tree)
tree <- read.tree(text="(((A,B),(C,D)),E);")
plotTree(tree, offset=1)
tiplabels(frame="circle", bg='lightblue',cex=1)
nodelabels(frame="circle",bg='white', cex=1)
tree <- read.tree(text="(((A,B),(C,D)),E);")#
plotTree(tree, offset=1)#
tiplabels(frame="circle", bg='lightblue',cex=1)#
nodelabels(frame="circle",bg='white', cex=1)
tree$tip.label
tree$edge
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))#
#
par(las=1)
hist(AnolisTree$edge.length, col='black', border='white', main="", xlab="edge lengths for the Anolis tree", ylim=c(0,50),xlim=c(0,6))
tipEdges <- which(AnolisTree$edge[,2]<=Ntip(AnolisTree))
Lengths <- AnolisTree$edge.length
names(Lengths)<- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
?plot.phylo
plot(AnolisTree, cex=0.25)
Labs <-sapply(AnolisTree$edge.length, round, digits=2)
edgelabels(text=Labs, cex=0.25)
plotTree(AnolisTree, offset=1)
edgelabels(text=NULL, cex=0.25)
plot(AnolisTree, type="fan")
plot(AnolisTree, type="circle")
plot(AnolisTree, type="fan")
plot(AnolisTree,cex=0.25,tip.color='red')
plotTree(AnolisTree, offset=1)
plotTree(AnolisTree, offset=1, notip)
ltt(AnolisTree)
abline(0,1,lwd=2,col='red',lty=2)
fit.bd(AnolisTree, rho=0.2)
?which()
which(edgelength)
which$edge
